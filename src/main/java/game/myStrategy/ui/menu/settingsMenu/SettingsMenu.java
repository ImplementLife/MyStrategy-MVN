package game.myStrategy.ui.menu.settingsMenu;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import game.myStrategy.ui.menu.settingsMenu.tabs.Common;
import game.myStrategy.ui.menu.settingsMenu.tabs.Control;
import game.myStrategy.ui.menu.settingsMenu.tabs.Graphic;
import game.myStrategy.ui.menu.settingsMenu.tabs.Sound;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class SettingsMenu {
    private static SettingsMenu instance;

    public static SettingsMenu get() {
        if (instance == null) {
            instance = new SettingsMenu();
            instance.closeAction = () -> {
            };
            instance.buttonsInit();
            instance.tabsInit();
        }
        return instance;
    }

    private JPanel root;
    private JTabbedPane tabbedPane1;

    private JButton confirm;
    private JButton cancel;
    private JButton close;

    private JPanel graphicTab;
    private JPanel soundTab;
    private JPanel controlTab;
    private JPanel commonTab;

    private Runnable closeAction;

    private Graphic graphic;
    private Sound sound;
    private Control control;
    private Common common;

    private SettingsMenu() {
    }

    private void tabsInit() {
        if (graphic == null) graphic = new Graphic();
        if (sound == null) sound = new Sound();
        if (control == null) control = new Control();
        if (common == null) common = new Common();

        graphicTab.add(graphic.getRoot());
        soundTab.add(sound.getRoot());
        controlTab.add(control.getRoot());
        commonTab.add(common.getRoot());
    }

    private void buttonsInit() {
        confirm.addActionListener(e -> saveAll());
        cancel.addActionListener(e -> closeAction.run());
        close.addActionListener(e -> closeAction.run());

        confirm.setFocusable(false);
        cancel.setFocusable(false);
        close.setFocusable(false);
    }

    private void saveAll() {
        graphic.saveAll();
        sound.saveAll();
        control.saveAll();
        common.saveAll();
    }

    public void setCloseAction(Runnable closeAction) {
        this.closeAction = closeAction;
    }

    public JPanel getRoot() {
        return root;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        root.setBackground(new Color(-11053225));
        root.setForeground(new Color(-1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-11053225));
        root.add(panel1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tabbedPane1 = new JTabbedPane();
        tabbedPane1.setBackground(new Color(-11053225));
        tabbedPane1.setForeground(new Color(-1));
        tabbedPane1.setTabPlacement(1);
        panel1.add(tabbedPane1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(800, 600), null, 0, false));
        graphicTab = new JPanel();
        graphicTab.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        graphicTab.setBackground(new Color(-11053225));
        graphicTab.setForeground(new Color(-11053225));
        tabbedPane1.addTab("Графика", graphicTab);
        soundTab = new JPanel();
        soundTab.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        soundTab.setBackground(new Color(-11316397));
        soundTab.setForeground(new Color(-11053225));
        tabbedPane1.addTab("Звук", soundTab);
        controlTab = new JPanel();
        controlTab.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        controlTab.setBackground(new Color(-11316397));
        controlTab.setForeground(new Color(-11053225));
        tabbedPane1.addTab("Управление", controlTab);
        commonTab = new JPanel();
        commonTab.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        commonTab.setBackground(new Color(-11053225));
        commonTab.setForeground(new Color(-11053225));
        tabbedPane1.addTab("Общее", commonTab);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setBackground(new Color(-11053225));
        panel2.setForeground(new Color(-1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setBackground(new Color(-11053225));
        label1.setEnabled(true);
        Font label1Font = this.$$$getFont$$$(null, -1, 20, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-1));
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setText("Настройки");
        panel2.add(label1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        close = new JButton();
        close.setBackground(new Color(-10461088));
        close.setForeground(new Color(-1));
        close.setRequestFocusEnabled(true);
        close.setText("x");
        panel2.add(close, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel2.add(spacer2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel1.add(spacer3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel3.setBackground(new Color(-11053225));
        panel3.setForeground(new Color(-1));
        panel1.add(panel3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        confirm = new JButton();
        confirm.setBackground(new Color(-10461088));
        confirm.setForeground(new Color(-1));
        confirm.setRequestFocusEnabled(true);
        confirm.setText("Подтвердить");
        panel3.add(confirm, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        panel3.add(spacer4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        cancel = new JButton();
        cancel.setBackground(new Color(-10461088));
        cancel.setForeground(new Color(-1));
        cancel.setRequestFocusEnabled(true);
        cancel.setText("Отмена");
        panel3.add(cancel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        root.add(spacer5, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        root.add(spacer6, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer7 = new Spacer();
        root.add(spacer7, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer8 = new Spacer();
        root.add(spacer8, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
